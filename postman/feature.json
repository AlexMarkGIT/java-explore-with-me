{
	"info": {
		"_postman_id": "2d4812d1-84ea-4852-9b01-dd885c969b3a",
		"name": "Test Explore With Me - feature-comments",
		"description": "# üöÄ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## üí°Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29441862"
	},
	"item": [
		{
			"name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = true\r",
							"        let event = await api.addEvent(user.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"        const commentator = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set('uid', commentator.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"\r",
							"        let randomtxt = pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 200);\r",
							"\r",
							"        pm.collectionVariables.set('randomText', randomtxt);\r",
							"        \r",
							"    } catch(err) {\r",
							"        console.error(\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\", err);\r",
							"    }\r",
							"\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—à —Å–∫—Ä–∏–ø—Ç\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, content, created, published, status, commentator,event\", function() {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('content');\r",
							"pm.expect(target).to.have.property('created');\r",
							"pm.expect(target).to.have.property('published');\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('event');\r",
							"});\r",
							"\r",
							"pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—É –∏ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã\", function() {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.content).equal(pm.collectionVariables.get('randomText'));\r",
							"    pm.expect(target.created).to.not.be.null;\r",
							"    pm.expect(target.published).to.be.null;\r",
							"    pm.expect(target.status).equal('PENDING');\r",
							"    pm.expect(target.commentator).equal(pm.collectionVariables.get('uid'));\r",
							"    pm.expect(target.event).equal(pm.collectionVariables.get('eid'));\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set('commid', target.id);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"event\": {{eid}},\r\n    \"content\": \"{{randomText}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–æ–±—ã—Ç–∏—é",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"\r",
							"    try {\r",
							"        let newEventId = pm.collectionVariables.get('eid') + 1;\r",
							"        pm.collectionVariables.set('eid', newEventId);\r",
							"    } catch(err) {\r",
							"        console.error(\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\", err);\r",
							"    }\r",
							"\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—à —Å–∫—Ä–∏–ø—Ç\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"let eidOld = pm.collectionVariables.get('eid') - 1;\r",
							"\r",
							"pm.collectionVariables.set('eid', eidOld);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"event\": {{eid}},\r\n    \"content\": \"{{randomText}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"\r",
							"    try {\r",
							"        let randomtxt = pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 200);\r",
							"        pm.collectionVariables.set('randomText', randomtxt);\r",
							"    } catch(err) {\r",
							"        console.error(\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\", err);\r",
							"    }\r",
							"\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—à —Å–∫—Ä–∏–ø—Ç\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—É\", function() {\r",
							"    pm.expect(target.id).equal(pm.collectionVariables.get('commid'));\r",
							"    pm.expect(target.content).equal(pm.collectionVariables.get('randomText'));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"content\": \"{{randomText}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "commentId",
							"value": "{{commid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—É\", function() {\r",
							"    pm.expect(target.id).equal(pm.collectionVariables.get('commid'));\r",
							"    pm.expect(target.content).equal(pm.collectionVariables.get('randomText'));\r",
							"    pm.expect(target.status).equal(\"CONFIRMED\");\r",
							"    pm.expect(target.published).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId?confirmed=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"query": [
						{
							"key": "confirmed",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{commid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ id –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–º",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, content, created, published, status, commentator,event\", function() {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('content');\r",
							"    pm.expect(target).to.have.property('created');\r",
							"    pm.expect(target).to.have.property('published');\r",
							"    pm.expect(target).to.have.property('status');\r",
							"    pm.expect(target).to.have.property('commentator');\r",
							"    pm.expect(target).to.have.property('event');\r",
							"});\r",
							"\r",
							"pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—É –∏ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã\", function() {\r",
							"    pm.expect(target.id).equal(pm.collectionVariables.get('commid'));\r",
							"    pm.expect(target.content).equal(pm.collectionVariables.get('randomText'));\r",
							"    pm.expect(target.created).to.not.be.null;\r",
							"    pm.expect(target.published).to.not.be.null;\r",
							"    pm.expect(target.status).equal('CONFIRMED');\r",
							"    pm.expect(target.commentator).equal(pm.collectionVariables.get('uid'));\r",
							"    pm.expect(target.event).equal(pm.collectionVariables.get('eid'));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "commentId",
							"value": "{{commid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "–ø—É–±–ª–∏—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ id —Å–æ–±—ã—Ç–∏—è",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"–†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–≤–µ–Ω 1\", function() {\r",
							"    pm.expect(target.length).to.equal(1);\r",
							"});\r",
							"\r",
							"pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, content, published, commentator,event\", function() {\r",
							"    pm.expect(target[0]).to.have.property('id');\r",
							"    pm.expect(target[0]).to.have.property('content');\r",
							"    pm.expect(target[0]).to.have.property('published');\r",
							"    pm.expect(target[0]).to.have.property('commentator');\r",
							"    pm.expect(target[0]).to.have.property('event');\r",
							"});\r",
							"\r",
							"pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—É –∏ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã\", function() {\r",
							"    pm.expect(target[0].id).equal(pm.collectionVariables.get('commid'));\r",
							"    pm.expect(target[0].content).equal(pm.collectionVariables.get('randomText'));\r",
							"    pm.expect(target[0].published).to.not.be.null;\r",
							"    pm.expect(target[0].commentator).equal(pm.collectionVariables.get('uid'));\r",
							"    pm.expect(target[0].event).equal(pm.collectionVariables.get('eid'));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCompilation(compilation, verbose=null) {\r",
					"        return this.post(\"/admin/compilations\", compilation, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –ø–æ–¥–±–æ—Ä–∫–∏: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏\", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è\", verbose);\r",
					"    }\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–±—ã—Ç–∏—è\", verbose);\r",
					"    }\r",
					"\r",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCategory(catId, verbose=null) {\r",
					"        return this.get('/categories/' + catId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCompilation(compId, verbose=null) {\r",
					"        return this.get('/compilations/' + compId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–¥–±–æ—Ä–∫–∏ –ø–æ id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏—è –ø–æ id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ post-–∑–∞–ø—Ä–æ—Å–∞: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ patch-–∑–∞–ø—Ä–æ—Å–∞: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ get-–∑–∞–ø—Ä–æ—Å–∞: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    async sendRequest(method, path, body=null, errorText = \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–∫–∞.\\n\", err,\r",
					"                             \"\\n–î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–∞–∫–æ–π –∂–µ –∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ \" + \r",
					"                             \"–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ. –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è - \", response.code, \", —Ç–µ–ª–æ: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getCompilation(...eventIds) {\r",
					"        return {\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            events: eventIds\r",
					"        };\r",
					"    }\r",
					"\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"key": "usersCount",
			"value": "1",
			"type": "string"
		},
		{
			"key": "catid",
			"value": "",
			"type": "string"
		},
		{
			"key": "request_body",
			"value": "",
			"type": "string"
		},
		{
			"key": "mail",
			"value": "",
			"type": "string"
		},
		{
			"key": "response",
			"value": "",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "",
			"type": "string"
		},
		{
			"key": "catname",
			"value": "",
			"type": "string"
		},
		{
			"key": "eid",
			"value": "",
			"type": "string"
		},
		{
			"key": "compid",
			"value": "",
			"type": "string"
		},
		{
			"key": "toCheck",
			"value": "",
			"type": "string"
		},
		{
			"key": "newDataToSet",
			"value": "",
			"type": "string"
		},
		{
			"key": "uid1",
			"value": "",
			"type": "string"
		},
		{
			"key": "reqid",
			"value": "",
			"type": "string"
		},
		{
			"key": "catId",
			"value": "",
			"type": "string"
		},
		{
			"key": "confirmedRequests",
			"value": "",
			"type": "string"
		},
		{
			"key": "responseArr",
			"value": "",
			"type": "string"
		},
		{
			"key": "source1",
			"value": "",
			"type": "string"
		},
		{
			"key": "source2",
			"value": "",
			"type": "string"
		},
		{
			"key": "fromId",
			"value": "0",
			"type": "string"
		},
		{
			"key": "source",
			"value": "",
			"type": "string"
		},
		{
			"key": "body",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomText",
			"value": "",
			"type": "string"
		},
		{
			"key": "commid",
			"value": "",
			"type": "string"
		}
	]
}